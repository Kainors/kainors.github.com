<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ajax | 小諾的沒技術農場]]></title>
  <link href="http://Kainors.github.com/blog/categories/ajax/atom.xml" rel="self"/>
  <link href="http://Kainors.github.com/"/>
  <updated>2012-11-12T16:07:41+08:00</updated>
  <id>http://Kainors.github.com/</id>
  <author>
    <name><![CDATA[Kainors]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用XMLHttpRequest執行AJAX跨網域存取]]></title>
    <link href="http://Kainors.github.com/blog/2012/11/12/ajax-cross-domain/"/>
    <updated>2012-11-12T14:15:00+08:00</updated>
    <id>http://Kainors.github.com/blog/2012/11/12/ajax-cross-domain</id>
    <content type="html"><![CDATA[<p>最近開發的東西，開始嘗試使用Web App的方式來製作<br/>
當然會用到許多Ajax的Request來傳遞資料<br/>
而後臺的掌控權是在另一位同事的手上<br/>
於是在測試時，要調用後台的資料便出現了Cross Domain的問題</p>

<!--more-->


<p>因為javascript本身的限制(許多broswer端的
雖然這個問題可以自己寫個proxy的站台<br/>
將資料處理好後，再傳送到前端頁面<br/>
不過未來的產品上，雖然有http的service<br/>
但不見得有完整的web server<br/>
所以寫proxy的想法就先放一邊<br/>
就在邊找解決辦法時<br/>
看到原來Ajax的XMLHttpRequest本身就提供cross domain的解決方法<br/>
不過server side也得提供相對應的response header
就是<code>Access-Control-Allow-Origin</code><br/>
下面就以PHP作為範例
```php cross.php
&lt;?php</p>

<pre><code>header("Access-Control-Allow-Origin: http://kainors.github.com");
echo "Cross Domain OK!!";
</code></pre>

<p>?>
<code>``
而</code>Access-Control-Allow-Origin`這個header後面就是限制可存取的網域<br/>
如果希望可以讓所有網站都可以存取可以使用"*"</p>

<p>接著測試的頁面中主要的JavaScript如下：
```javascript
function createCrossReuqest(method, url){</p>

<pre><code>var xhr = new XMLHttpRequest();
if("withCredentials" in xhr){
    xhr.open(method, url, true);
}
else if(typeof XDomainRequest != "undefined"){
    xhr = new XDomainRequest();
    xhr.open(method, url);
}
else{
    xhr = null;
}
</code></pre>

<p>}</p>

<p>var request = createCrossRequest("get", "http://www.testsite/cross.php");
if(request){</p>

<pre><code>request.onload = function(){
    alert(request.responseText);
};
request.send();
</code></pre>

<p>}
<code>``
雖然這個方法，還是無法直接讓javascript執行跨網域的存取  
但只要在server side增加</code>Access-Control-Allow-Origin`這個header就能解決問題<br/>
在團隊開發中，至少還是個不錯的方法</p>
]]></content>
  </entry>
  
</feed>
